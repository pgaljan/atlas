generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  active
  inactive
  suspended
  cancelled
}

enum Visibility {
  public
  private
  archived
  restricted
}

enum Status {
  active
  inactive
}

enum WorkspaceRole {
  admin
  member
}

enum InvitationStatus {
  pending
  expired
  accepted
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  teams            Team[]
  structures       Structure[]
  defaultFor       User[]             @relation("UserDefaultWorkspace")
  Backup           Backup[]
  Invitation       Invitation[]
  StructureCatalog StructureCatalog[]
}

model User {
  id                 String        @id @default(uuid())
  fullName           String?
  username           String        @unique
  email              String        @unique
  roleId             String
  password           String
  isAdmin            Boolean       @default(false)
  inviteCount        Int           @default(0)
  commissionEarned   Decimal       @default(0)
  createdAt          DateTime      @default(now())
  deletedAt          DateTime?
  referredBy         String?
  apiKeys            ApiKey[]
  attachments        Attachment[]
  auditLogs          AuditLog[]
  backups            Backup[]
  deletionLogs       DeletionLog[]
  structures         Structure[]
  subscription       Subscription?
  tokens             Token[]
  role               Role          @relation("UserRole", fields: [roleId], references: [id])
  roles              Role[]        @relation("UserRoles")
  invitationsSent    Invitation[]  @relation("UserInvitations")
  invitedBy          Invitation[]  @relation("UserInvited")
  teamMembers        TeamMember[]
  Team               Team[]
  defaultWorkspaceId String?
  defaultWorkspace   Workspace?    @relation("UserDefaultWorkspace", fields: [defaultWorkspaceId], references: [id])
  status             Status        @default(active)
}

model Invitation {
  id           String           @id @default(uuid())
  inviterId    String
  inviteeEmail String?
  token        String           @unique
  expiresAt    DateTime
  status       InvitationStatus @default(pending)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  usedAt       DateTime?

  inviter User    @relation("UserInvitations", fields: [inviterId], references: [id])
  userId  String?
  user    User?   @relation("UserInvited", fields: [userId], references: [id])

  referralCode String @unique

  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([inviterId])
  @@index([status])
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  key       String
  value     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  User        User[]  @relation("UserRole")
  users       User[]  @relation("UserRoles")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  ownerId     String
  workspaceId String
  createdAt   DateTime @default(now())

  owner      User         @relation(fields: [ownerId], references: [id])
  members    TeamMember[]
  structures Structure[]  @relation("TeamStructures")
  workspace  Workspace    @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

model TeamMember {
  id          String   @id @default(uuid())
  teamId      String
  userId      String
  workspaceId String
  role        String
  createdAt   DateTime @default(now())

  team        Team       @relation(fields: [teamId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  Structure   Structure? @relation(fields: [structureId], references: [id])
  structureId String?

  @@unique([teamId, userId])
  @@index([workspaceId])
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String             @unique
  planId    String
  features  Json
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(active)
  plan      Plan               @relation(fields: [planId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Decimal
  features      Json
  status        Status         @default(active)
  subscriptions Subscription[]
}

model Structure {
  id             String          @id @default(uuid())
  title          String?
  name           String
  description    String?
  ownerId        String
  workspaceId    String          @default("default_workspace_id")
  imageUrl       String?
  markmapShowWbs Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  visibility     Visibility      @default(private)
  elements       Element[]
  parsedData     ParsedContent[]
  renderers      Renderer[]
  owner          User            @relation(fields: [ownerId], references: [id])
  workspace      Workspace       @relation(fields: [workspaceId], references: [id])
  StructureMap   StructureMap[]
  Webhook        Webhook[]
  teamMembers    TeamMember[]
  teams          Team[]          @relation("TeamStructures")
  teamId         String?
}

model Element {
  id            String         @id @default(uuid())
  structureId   String
  recordId      String?
  parentId      String?
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  elementLinkId String?
  orderIndex    Int            @default(0)
  ElementLink   ElementLink?   @relation(fields: [elementLinkId], references: [id])
  parent        Element?       @relation("ParentChild", fields: [parentId], references: [id])
  children      Element[]      @relation("ParentChild")
  structure     Structure      @relation(fields: [structureId], references: [id], onDelete: Cascade)
  Record        Record?        @relation(fields: [recordId], references: [id])
  sourceLinks   ElementLink[]  @relation("SourceElement")
  targetLinks   ElementLink[]  @relation("TargetElement")
  StructureMap  StructureMap[] @relation("MapElements")
}

model Record {
  id        String    @id @default(uuid())
  metadata  Json
  tags      Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Element   Element[]
}

model ParsedContent {
  id             String     @id @default(uuid())
  Guid           String     @unique @default(uuid())
  structureId    String?
  type           String
  wbs            String
  level          Int
  element        String
  uniqWBS        String?    @unique
  markmapMM      String?
  additionalData Json?
  createdAt      DateTime   @default(now())
  structure      Structure? @relation(fields: [structureId], references: [id])
}

model ElementLink {
  id              String    @id @default(uuid())
  sourceElementId String
  targetElementId String
  attributes      Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Element         Element[]
  sourceElement   Element   @relation("SourceElement", fields: [sourceElementId], references: [id])
  targetElement   Element   @relation("TargetElement", fields: [targetElementId], references: [id])
}

model StructureMap {
  id          String    @id @default(uuid())
  structureId String
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  structure   Structure @relation(fields: [structureId], references: [id])
  elements    Element[] @relation("MapElements")
}

model Backup {
  id          String    @id @default(uuid())
  title       String?
  userId      String
  backupData  Json
  workspaceId String    @default("default_workspace_id")
  isPublic    Boolean   @default(false)
  fileUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model DeletionLog {
  id        String   @id @default(uuid())
  userId    String
  element   String
  elementId String?
  deletedAt DateTime @default(now())
  reason    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Attachment {
  id        String   @id @default(uuid())
  userId    String
  fileUrl   String
  fileType  String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Renderer {
  id             String    @id @default(uuid())
  type           String
  config         Json
  customSettings Json
  structureId    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  structure      Structure @relation(fields: [structureId], references: [id])
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  element   String?
  elementId String?
  details   Json
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model ExternalIntegration {
  id        String   @id @default(uuid())
  name      String
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Webhook {
  id          String    @id @default(uuid())
  url         String
  events      String[]
  structureId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  structure   Structure @relation(fields: [structureId], references: [id])
}

model StructureCatalog {
  id           String   @id @default(uuid())
  name         String
  description  String?
  thumbnailUrl String?
  fileUrl      String?
  userTier     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}
